svm_model <- train(TSK ~ U10 + V10 + Q2 + RAINC + RAINNC + PSFC + SMOIS,
data = trainData,
method = "svmRadial",
trControl = control,
tuneGrid = svm_grid)
# Load necessary libraries
library(tidyverse)
library(caret)
library(randomForest)
library(e1071)
library(gbm)
# Load and preprocess data
data <- read_csv("C:/Users/Ahmad Afzal/Desktop/Refined_Scotland_WRFdata.csv")
colnames(data) <- c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "DATETIME", "WIND_SPEED", "Hour", "Day_Night", "Date")
# Convert necessary columns to correct data types
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d.%m.%Y.%H.%M")
data$Day_Night <- as.factor(data$Day_Night)
data$Hour <- as.numeric(data$Hour)
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# Remove rows with NA values in critical columns
critical_columns <- c("TSK", "PSFC", "SMOIS", "WIND_SPEED", "RAINC")
data <- data %>%
filter(!if_any(all_of(critical_columns), is.na))
# Split the data into training (70%) and testing (30%) sets
set.seed(123)
trainIndex <- createDataPartition(data$TSK, p = .7, list = FALSE)
trainData <- data[trainIndex,]
testData <- data[-trainIndex,]
# Standardize the numeric columns
numeric_cols <- names(trainData)[sapply(trainData, is.numeric)]
preProc <- preProcess(trainData[, numeric_cols], method = c("center", "scale"))
trainData[, numeric_cols] <- predict(preProc, trainData[, numeric_cols])
testData[, numeric_cols] <- predict(preProc, testData[, numeric_cols])
# Add interaction terms to the linear regression model
lm_model <- lm(TSK ~ U10 * V10 + Q2 * PSFC + RAINC + RAINNC + SMOIS, data = trainData)
lm_preds <- predict(lm_model, testData)
lm_rmse <- sqrt(mean((lm_preds - testData$TSK)^2))
cat("Linear Regression RMSE (with interaction terms):", lm_rmse, "\n")
# Tune Random Forest hyperparameters
rf_grid <- expand.grid(mtry = 2:4, ntree = c(100, 200, 300))
control <- trainControl(method = "cv", number = 5)
rf_model <- train(TSK ~ U10 + V10 + Q2 + RAINC + RAINNC + PSFC + SMOIS,
data = trainData,
method = "rf",
trControl = control,
tuneGrid = rf_grid)
# Add interaction terms to the linear regression model
lm_model <- lm(TSK ~ U10 * V10 + Q2 * PSFC + RAINC + RAINNC + SMOIS, data = trainData)
lm_preds <- predict(lm_model, testData)
lm_rmse <- sqrt(mean((lm_preds - testData$TSK)^2))
cat("Linear Regression RMSE (with interaction terms):", lm_rmse, "\n")
# Tune Random Forest hyperparameters
rf_grid <- expand.grid(mtry = 2:4, ntree = c(100, 200, 300))
control <- trainControl(method = "cv", number = 5)
rf_model <- train(TSK ~ U10 + V10 + Q2 + RAINC + RAINNC + PSFC + SMOIS,
data = trainData,
method = "rf",
trControl = control,
tuneGrid = rf_grid)
rf_preds <- predict(rf_model, testData)
rf_rmse <- sqrt(mean((rf_preds - testData$TSK)^2))
cat("Random Forest RMSE (after tuning):", rf_rmse, "\n")
# Tune SVM hyperparameters
svm_grid <- expand.grid(sigma = 0.01, C = 2^(2:9))
svm_model <- train(TSK ~ U10 + V10 + Q2 + RAINC + RAINNC + PSFC + SMOIS,
data = trainData,
method = "svmRadial",
trControl = control,
tuneGrid = svm_grid)
svm_preds <- predict(svm_model, testData)
svm_rmse <- sqrt(mean((svm_preds - testData$TSK)^2))
cat("SVM RMSE (after tuning):", svm_rmse, "\n")
# Tune GBM hyperparameters
gbm_grid <- expand.grid(interaction.depth = 3:5,
n.trees = c(100, 200),
shrinkage = c(0.01, 0.1),
n.minobsinnode = 10)
gbm_model <- train(TSK ~ U10 + V10 + Q2 + RAINC + RAINNC + PSFC + SMOIS,
data = trainData,
method = "gbm",
trControl = control,
tuneGrid = gbm_grid,
verbose = FALSE)
gbm_preds <- predict(gbm_model, testData)
gbm_rmse <- sqrt(mean((gbm_preds - testData$TSK)^2))
cat("GBM RMSE (after tuning):", gbm_rmse, "\n")
gbm_rmse <- sqrt(mean((gbm_preds - testData$TSK)^2))
cat("GBM RMSE (after tuning):", gbm_rmse, "\n")
# Compare RMSE of all models
cat("Linear Regression RMSE:", lm_rmse, "\n")
cat("Random Forest RMSE:", rf_rmse, "\n")
cat("SVM RMSE:", svm_rmse, "\n")
cat("GBM RMSE:", gbm_rmse, "\n")
# Select the best model based on RMSE
best_model <- which.min(c(lm_rmse, rf_rmse, svm_rmse, gbm_rmse))
model_names <- c("Linear Regression", "Random Forest", "SVM", "GBM")
cat("Best model based on RMSE is:", model_names[best_model], "\n")
# Final Model Evaluation
final_model <- switch(best_model, lm_model, rf_model, svm_model, gbm_model)
final_preds <- predict(final_model, testData)
final_rmse <- sqrt(mean((final_preds - testData$TSK)^2))
cat("Final Model RMSE on Test Data:", final_rmse, "\n")
# Analyze residuals
residuals <- testData$TSK - final_preds
plot(residuals, main = "Residuals of Final Model", ylab = "Residuals")
#Load necessary libraries
library(tidyverse)
library(caret)
library(randomForest)
library(e1071)
library(gbm)
library(corrplot)
library(ggplot2)
# Load and preprocess data
data <- read_csv("C:/Users/Ahmad Afzal/Desktop/Refined_Scotland_WRFdata.csv")
data.frame(data)
# Ensure the column names are correct
colnames(data) <- c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "DATETIME", "WIND_SPEED", "Hour", "Day_Night", "Date")
# Convert DATETIME to POSIXct format and other columns as necessary
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d.%m.%Y.%H.%M")
data$Day_Night <- as.factor(data$Day_Night)
data$Hour <- as.numeric(data$Hour)
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# Display the structure of the dataset to verify changes
str(data)
# 1. Define the critical columns, including RAINC
critical_columns <- c("TSK", "PSFC", "SMOIS", "WIND_SPEED", "RAINC")
# 2. Remove rows with any NA values in the critical columns
data <- data %>%
filter(!if_any(all_of(critical_columns), is.na))
# 3. Verify that there are no NA values left
na_summary <- colSums(is.na(data))
print("Remaining NA values per column:")
print(na_summary)
# Proceed to the next steps only if NA values are handled
if (all(na_summary == 0)) {
cat("All NA values have been handled.\n")
} else {
stop("NA values still exist in the dataset. Please check the handling process.")
}
# View the cleaned data
print(head(data))
# Compare the RMSE of all models
cat("Linear Regression RMSE:", lm_rmse_clean, "\n")
cat("Random Forest RMSE:", rf_rmse, "\n")
cat("SVM RMSE:", svm_rmse, "\n")
cat("GBM RMSE:", gbm_rmse, "\n")
# Select the best model based on RMSE
best_model <- which.min(c(lm_rmse_clean, rf_rmse, svm_rmse, gbm_rmse))
model_names <- c("Linear Regression", "Random Forest", "SVM", "GBM")
cat("Best model based on RMSE is:", model_names[best_model], "\n")
# Random Forest
final_model <- rf_model
final_preds <- predict(final_model, testData)
final_rmse <- sqrt(mean((final_preds - testData$TSK)^2))
cat("Final Model RMSE on Test Data:", final_rmse, "\n")
# Analyze residuals
residuals <- testData$TSK - final_preds
plot(residuals, main = "Residuals of Final Model", ylab = "Residuals")
# Load necessary libraries
library(ggplot2)
library(gridExtra)
packages.install("gridextra")
packages.install("gridExtra")
install.packages("gridExtra")
# Load the preprocessed data
data <- read_csv("C:/Users/Ahmad Afzal/Desktop/Refined_Scotland_WRFdata.csv")
# Load the preprocessed data
data <- read_csv("C:/Users/Ahmad Afzal/Desktop/Refined_Scotland_WRFdata.csv")
# Convert columns to appropriate types
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d.%m.%Y.%H.%M")
data$Day_Night <- as.factor(data$Day_Night)
data$Hour <- as.numeric(data$Hour)
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# 1. Temperature at Skin Level (TSK) Distribution
p1 <- ggplot(data, aes(x = TSK)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Temperature at Skin Level (TSK)", x = "TSK", y = "Frequency") +
theme_minimal()
# 1. Temperature at Skin Level (TSK) Distribution
p1 <- ggplot(data, aes(x = TSK)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Temperature at Skin Level (TSK)", x = "TSK", y = "Frequency") +
theme_minimal()
# 2. Surface Pressure (PSFC) Distribution
p2 <- ggplot(data, aes(x = PSFC)) +
geom_histogram(binwidth = 1, fill = "red", color = "black", alpha = 0.7) +
labs(title = "Distribution of Surface Pressure (PSFC)", x = "PSFC", y = "Frequency") +
theme_minimal()
# 3. Wind Speed Distribution
p3 <- ggplot(data, aes(x = WIND_SPEED)) +
geom_histogram(binwidth = 0.5, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribution of Wind Speed", x = "Wind Speed", y = "Frequency") +
theme_minimal()
# 4. Relationship between TSK and PSFC
p4 <- ggplot(data, aes(x = PSFC, y = TSK)) +
geom_point(color = "purple", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Surface Pressure (PSFC) and TSK", x = "PSFC", y = "TSK") +
theme_minimal()
# 5. Wind Components (U10 and V10) Distribution
p5 <- ggplot(data, aes(x = U10, y = V10)) +
geom_point(color = "orange", alpha = 0.6) +
labs(title = "Distribution of Wind Components (U10 vs V10)", x = "U10", y = "V10") +
theme_minimal()
# 6. Correlation Heatmap
numeric_data <- data[, c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "WIND_SPEED")]
cor_matrix <- cor(numeric_data, use = "complete.obs")
melted_cor_matrix <- melt(cor_matrix)
# 6. Correlation Heatmap
numeric_data <- data[, c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "WIND_SPEED")]
cor_matrix <- cor(numeric_data, use = "complete.obs")
melted_cor_matrix <- melt(cor_matrix)
p6 <- ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlation") +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 7. Boxplots of TSK by Day/Night
p7 <- ggplot(data, aes(x = Day_Night, y = TSK, fill = Day_Night)) +
geom_boxplot() +
labs(title = "Boxplot of TSK by Day/Night", x = "Day/Night", y = "TSK") +
theme_minimal()
# 8. Rainfall (RAINC) over Time
p8 <- ggplot(data, aes(x = DATETIME, y = RAINC)) +
geom_line(color = "darkblue", alpha = 0.7) +
labs(title = "Rainfall (RAINC) Over Time", x = "DateTime", y = "RAINC") +
theme_minimal()
# 9. Scatter Plot Matrix
pairs(data[, c("TSK", "PSFC", "U10", "V10", "Q2", "WIND_SPEED")], main = "Scatterplot Matrix")
# 10. Monthly Average TSK
data$Month <- format(data$Date, "%Y-%m")
monthly_avg_tsk <- aggregate(TSK ~ Month, data, mean)
p9 <- ggplot(monthly_avg_tsk, aes(x = Month, y = TSK)) +
geom_line(group = 1, color = "darkred") +
labs(title = "Monthly Average TSK", x = "Month", y = "Average TSK") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol = 2)
# Load necessary libraries
library(ggplot2)
library(gridExtra)
library(reshape2)
# Load the preprocessed data
data <- read_csv("C:/Users/Ahmad Afzal/Desktop/Refined_Scotland_WRFdata.csv")
# Ensure the column names are correct
colnames(data) <- c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "DATETIME", "WIND_SPEED", "Hour", "Day_Night", "Date")
# Convert columns to appropriate types
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d.%m.%Y.%H.%M")
data$Day_Night <- as.factor(data$Day_Night)
data$Hour <- as.numeric(data$Hour)
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# 1. Temperature at Skin Level (TSK) Distribution
p1 <- ggplot(data, aes(x = TSK)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Temperature at Skin Level (TSK)", x = "TSK", y = "Frequency") +
theme_minimal()
# 1. Temperature at Skin Level (TSK) Distribution
p1 <- ggplot(data, aes(x = TSK)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Temperature at Skin Level (TSK)", x = "TSK", y = "Frequency") +
theme_minimal()
# 2. Surface Pressure (PSFC) Distribution
p2 <- ggplot(data, aes(x = PSFC)) +
geom_histogram(binwidth = 1, fill = "red", color = "black", alpha = 0.7) +
labs(title = "Distribution of Surface Pressure (PSFC)", x = "PSFC", y = "Frequency") +
theme_minimal()
# 3. Wind Speed Distribution
p3 <- ggplot(data, aes(x = WIND_SPEED)) +
geom_histogram(binwidth = 0.5, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribution of Wind Speed", x = "Wind Speed", y = "Frequency") +
theme_minimal()
# 4. Relationship between TSK and PSFC
p4 <- ggplot(data, aes(x = PSFC, y = TSK)) +
geom_point(color = "purple", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Surface Pressure (PSFC) and TSK", x = "PSFC", y = "TSK") +
theme_minimal()
# 5. Wind Components (U10 and V10) Distribution
p5 <- ggplot(data, aes(x = U10, y = V10)) +
geom_point(color = "orange", alpha = 0.6) +
labs(title = "Distribution of Wind Components (U10 vs V10)", x = "U10", y = "V10") +
theme_minimal()
# 6. Correlation Heatmap
numeric_data <- data[, c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "WIND_SPEED")]
cor_matrix <- cor(numeric_data, use = "complete.obs")
melted_cor_matrix <- melt(cor_matrix)
p6 <- ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlation") +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 7. Boxplots of TSK by Day/Night
p7 <- ggplot(data, aes(x = Day_Night, y = TSK, fill = Day_Night)) +
geom_boxplot() +
labs(title = "Boxplot of TSK by Day/Night", x = "Day/Night", y = "TSK") +
theme_minimal()
# 8. Rainfall (RAINC) over Time
p8 <- ggplot(data, aes(x = DATETIME, y = RAINC)) +
geom_line(color = "darkblue", alpha = 0.7) +
labs(title = "Rainfall (RAINC) Over Time", x = "DateTime", y = "RAINC") +
theme_minimal()
# 9. Scatter Plot Matrix
pairs(data[, c("TSK", "PSFC", "U10", "V10", "Q2", "WIND_SPEED")], main = "Scatterplot Matrix")
# 10. Monthly Average TSK
data$Month <- format(data$Date, "%Y-%m")
monthly_avg_tsk <- aggregate(TSK ~ Month, data, mean)
p9 <- ggplot(monthly_avg_tsk, aes(x = Month, y = TSK)) +
geom_line(group = 1, color = "darkred") +
labs(title = "Monthly Average TSK", x = "Month", y = "Average TSK") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol = 2)
p9 <- ggplot(monthly_avg_tsk, aes(x = Month, y = TSK)) +
geom_line(group = 1, color = "darkred") +
labs(title = "Monthly Average TSK", x = "Month", y = "Average TSK") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(ggplot2)
library(gridExtra)
library(reshape2)
# Load the preprocessed data
data <- read_csv("C:/Users/Ahmad Afzal/Desktop/Refined_Scotland_WRFdata.csv")
# Ensure the column names are correct
colnames(data) <- c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "DATETIME", "WIND_SPEED", "Hour", "Day_Night", "Date")
# Convert columns to appropriate types
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d.%m.%Y.%H.%M")
data$Day_Night <- as.factor(data$Day_Night)
data$Hour <- as.numeric(data$Hour)
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# 1. Temperature at Skin Level (TSK) Distribution
p1 <- ggplot(data, aes(x = TSK)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Temperature at Skin Level (TSK)", x = "TSK", y = "Frequency") +
theme_minimal()
# 2. Surface Pressure (PSFC) Distribution
p2 <- ggplot(data, aes(x = PSFC)) +
geom_histogram(binwidth = 1, fill = "red", color = "black", alpha = 0.7) +
labs(title = "Distribution of Surface Pressure (PSFC)", x = "PSFC", y = "Frequency") +
theme_minimal()
# 3. Wind Speed Distribution
p3 <- ggplot(data, aes(x = WIND_SPEED)) +
geom_histogram(binwidth = 0.5, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribution of Wind Speed", x = "Wind Speed", y = "Frequency") +
theme_minimal()
# 4. Relationship between TSK and PSFC
p4 <- ggplot(data, aes(x = PSFC, y = TSK)) +
geom_point(color = "purple", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Surface Pressure (PSFC) and TSK", x = "PSFC", y = "TSK") +
theme_minimal()
# 5. Wind Components (U10 and V10) Distribution
p5 <- ggplot(data, aes(x = U10, y = V10)) +
geom_point(color = "orange", alpha = 0.6) +
labs(title = "Distribution of Wind Components (U10 vs V10)", x = "U10", y = "V10") +
theme_minimal()
# 6. Correlation Heatmap
numeric_data <- data[, c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "WIND_SPEED")]
cor_matrix <- cor(numeric_data, use = "complete.obs")
melted_cor_matrix <- melt(cor_matrix)
p6 <- ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlation") +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 7. Boxplots of TSK by Day/Night
p7 <- ggplot(data, aes(x = Day_Night, y = TSK, fill = Day_Night)) +
geom_boxplot() +
labs(title = "Boxplot of TSK by Day/Night", x = "Day/Night", y = "TSK") +
theme_minimal()
# 8. Rainfall (RAINC) over Time
p8 <- ggplot(data, aes(x = DATETIME, y = RAINC)) +
geom_line(color = "darkblue", alpha = 0.7) +
labs(title = "Rainfall (RAINC) Over Time", x = "DateTime", y = "RAINC") +
theme_minimal()
# 9. Scatter Plot Matrix
pairs(data[, c("TSK", "PSFC", "U10", "V10", "Q2", "WIND_SPEED")], main = "Scatterplot Matrix")
# 10. Monthly Average TSK
data$Month <- format(data$Date, "%Y-%m")
monthly_avg_tsk <- aggregate(TSK ~ Month, data, mean)
p9 <- ggplot(monthly_avg_tsk, aes(x = Month, y = TSK)) +
geom_line(group = 1, color = "darkred") +
labs(title = "Monthly Average TSK", x = "Month", y = "Average TSK") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol = 2)
# 10. Monthly Average TSK
data$Month <- format(data$Date, "%Y-%m")
monthly_avg_tsk <- aggregate(TSK ~ Month, data, mean)
p9 <- ggplot(monthly_avg_tsk, aes(x = Month, y = TSK)) +
geom_line(group = 1, color = "darkred") +
labs(title = "Monthly Average TSK", x = "Month", y = "Average TSK") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Arrange the plots
grid.arrange(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol = 2)
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Load the preprocessed data
data <- read_csv("C:/Users/Ahmad Afzal/Desktop/Refined_Scotland_WRFdata.csv")
# Ensure the column names are correct
colnames(data) <- c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "DATETIME", "WIND_SPEED", "Hour", "Day_Night", "Date")
# Convert columns to appropriate types
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d.%m.%Y.%H.%M")
data$Day_Night <- as.factor(data$Day_Night)
data$Hour <- as.numeric(data$Hour)
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# 1. Temperature at Skin Level (TSK) Distribution
p1 <- ggplot(data, aes(x = TSK)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Temperature at Skin Level (TSK)", x = "TSK", y = "Frequency") +
theme_minimal()
# Plot 1
print(p1)
# 2. Surface Pressure (PSFC) Distribution
p2 <- ggplot(data, aes(x = PSFC)) +
geom_histogram(binwidth = 1, fill = "red", color = "black", alpha = 0.7) +
labs(title = "Distribution of Surface Pressure (PSFC)", x = "PSFC", y = "Frequency") +
theme_minimal()
# Plot 2
print(p2)
# Ensure the column names are correct
colnames(data) <- c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "DATETIME", "WIND_SPEED", "Hour", "Day_Night", "Date")
# Convert columns to appropriate types
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d.%m.%Y.%H.%M")
data$Day_Night <- as.factor(data$Day_Night)
data$Hour <- as.numeric(data$Hour)
data$Date <- as.Date(data$Date, format = "%m/%d/%Y")
# 1. Temperature at Skin Level (TSK) Distribution
p1 <- ggplot(data, aes(x = TSK)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Temperature at Skin Level (TSK)", x = "TSK", y = "Frequency") +
theme_minimal()
# Plot 1
print(p1)
# 2. Surface Pressure (PSFC) Distribution
p2 <- ggplot(data, aes(x = PSFC)) +
geom_histogram(binwidth = 1, fill = "red", color = "black", alpha = 0.7) +
labs(title = "Distribution of Surface Pressure (PSFC)", x = "PSFC", y = "Frequency") +
theme_minimal()
# Plot 2
print(p2)
# 3. Wind Speed Distribution
p3 <- ggplot(data, aes(x = WIND_SPEED)) +
geom_histogram(binwidth = 0.5, fill = "green", color = "black", alpha = 0.7) +
labs(title = "Distribution of Wind Speed", x = "Wind Speed", y = "Frequency") +
theme_minimal()
# Plot 3
print(p3)
# 4. Relationship between TSK and PSFC
p4 <- ggplot(data, aes(x = PSFC, y = TSK)) +
geom_point(color = "purple", alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Relationship between Surface Pressure (PSFC) and TSK", x = "PSFC", y = "TSK") +
theme_minimal()
# Plot 4
print(p4)
# 5. Wind Components (U10 and V10) Distribution
p5 <- ggplot(data, aes(x = U10, y = V10)) +
geom_point(color = "orange", alpha = 0.6) +
labs(title = "Distribution of Wind Components (U10 vs V10)", x = "U10", y = "V10") +
theme_minimal()
# Plot 5
print(p5)
# 6. Correlation Heatmap
numeric_data <- data[, c("TSK", "PSFC", "U10", "V10", "Q2", "RAINC", "RAINNC", "SNOW", "TSLB", "SMOIS", "WIND_SPEED")]
cor_matrix <- cor(numeric_data, use = "complete.obs")
melted_cor_matrix <- melt(cor_matrix)
p6 <- ggplot(data = melted_cor_matrix, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1, 1), space = "Lab", name = "Correlation") +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot 6
print(p6)
# 7. Boxplots of TSK by Day/Night
p7 <- ggplot(data, aes(x = Day_Night, y = TSK, fill = Day_Night)) +
geom_boxplot() +
labs(title = "Boxplot of TSK by Day/Night", x = "Day/Night", y = "TSK") +
theme_minimal()
# Plot 7
print(p7)
# 8. Rainfall (RAINC) over Time
p8 <- ggplot(data, aes(x = DATETIME, y = RAINC)) +
geom_line(color = "darkblue", alpha = 0.7) +
labs(title = "Rainfall (RAINC) Over Time", x = "DateTime", y = "RAINC") +
theme_minimal()
# Plot 8
print(p8)
# 9. Scatter Plot Matrix
pairs(data[, c("TSK", "PSFC", "U10", "V10", "Q2", "WIND_SPEED")], main = "Scatterplot Matrix")
# 9. Scatter Plot Matrix
pairs(data[, c("TSK", "PSFC", "U10", "V10", "Q2", "WIND_SPEED")], main = "Scatterplot Matrix")
# 10. Monthly Average TSK
data$Month <- format(data$Date, "%Y-%m")
monthly_avg_tsk <- aggregate(TSK ~ Month, data, mean)
p9 <- ggplot(monthly_avg_tsk, aes(x = Month, y = TSK)) +
geom_line(group = 1, color = "darkred") +
labs(title = "Monthly Average TSK", x = "Month", y = "Average TSK") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot 9
print(p9)
